# 
# Copyright (c) 2022-2023 University of Salerno, Italy. All rights reserved.
# 

cmake_minimum_required(VERSION 3.0.0)
project(empi-project VERSION 0.1.0)

include(CTest)
enable_testing()
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
include(FindMPI REQUIRED)

find_package(mdspan REQUIRED)

option(ENABLE_UNCHECKED_FUNCTION "enable unchecked function (requires custom OMPI)" ON)
option(BUILD_EXAMPLES "Build Examples" OFF)
option(ENABLE_TESTS "Enable testing" OFF)

# Force colorful diagnostic
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
       add_compile_options (-fdiagnostics-color=always)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
       add_compile_options (-fcolor-diagnostics)
    endif ()

set(header_files
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/empi.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/context.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/type_traits.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/message_grp_hdl.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/tag.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/utils.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/message_group.hpp 
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/request_pool.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/async_event.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/datatype.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/defines.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/layouts.hpp
	${CMAKE_CURRENT_SOURCE_DIR}/include/empi/layouts_traits.hpp
	)

add_library(empi INTERFACE ${header_files})

if(ENABLE_UNCHECKED_FUNCTION)
	add_compile_definitions(ENABLE_UNCHECKED_FUNCTION)
endif()

target_include_directories(empi INTERFACE MPI::MPI_CXX_INCLUDE_DIRS)

set_target_properties(empi
	PROPERTIES
	PUBLIC_HEADER "${header_files}"
	)
	
target_include_directories(empi
  INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)

target_link_libraries(empi INTERFACE MPI::MPI_CXX)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
	set(CMAKE_BUILD_TYPE "Release" CACHE STRING "The type of build" FORCE)
	message(STATUS "Setting build type to '${CMAKE_BUILD_TYPE}' as none was specified")
	set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "RelWithDebInfo")
endif()

if(ENABLE_TESTS)
	enable_testing()
	add_subdirectory(lib/Catch2) # Find Catch2
	add_subdirectory(test)
endif()

if(BUILD_EXAMPLES)
	add_subdirectory(examples)
endif()

message("//===---------------------------------------===//")
message("//           CONFIGURATION SUMMARY             //")
message("//===---------------------------------------===//")
message("-> ENABLE_UNCHECKED_FUNCTION:........ ${ENABLE_UNCHECKED_FUNCTION}")
message("-> BUILD_EXAMPLES:................... ${BUILD_EXAMPLES}")
if(BUILD_EXAMPLES)
message("---> BUILD_MPI_EXAMPLES:............. ${BUILD_MPI_EXAMPLES}")
message("---> BUILD_UMPI_EXAMPLES:............ ${BUILD_UMPI_EXAMPLES}")
message("---> BUILD_MPL_EXAMPLES:............. ${BUILD_MPL_EXAMPLES}")
endif()
message("-> ENABLE_TESTS:..................... ${ENABLE_TESTS}")
message("//===---------------------------------------===//")
